generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model Cart {
  id        String     @id @default(uuid())
  cartItem  CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  User      User?      @relation(fields: [userId], references: [id])
  userId    String?

  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cartitems")
}

model Product {
  id             String      @id @default(uuid())
  name           String
  description    String
  imageUrl       String
  price          Int
  category       Category    @relation(fields: [categoryId], references: [id], onUpdate: NoAction)
  categoryId     String
  subCategory    SubCategory @relation(fields: [subCategoryId], references: [id], onUpdate: NoAction)
  subCategoryId  String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  // stock          Int
  // isFeatured     Boolean     @default(false)
  // isBestSeller   Boolean     @default(false)
  // isPublished    Boolean     @default(true)
  isDiscounted   Boolean     @default(false)
  discountAmount Float?
  cartItem       CartItem[]

  @@index([categoryId])
  @@index([subCategoryId])
  @@map("products")
}

model SubCategory {
  id          String    @id @default(uuid())
  name        String
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  String

  @@index([categoryId])
  @@map("subCategories")
}

model Category {
  id            String        @id @default(uuid())
  name          String
  description   String?
  subCategories SubCategory[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  products      Product[]

  @@index([id])
  @@index([name])
  @@map("categories")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  Cart          Cart[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
